"numeric","numeric","numeric", "numeric",
"numeric"), skip = 13) |>
clean_names()
# We define the URL first from the website
data_url <- 'https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fwww.england.nhs.uk%2Fstatistics%2Fwp-content%2Fuploads%2Fsites%2F2%2F2023%2F10%2FMonthly-AE-Time-Series-September-2023.xls&wdOrigin=BROWSELINK'
# Then we can use 'download.file' to pull the data from the url and put it into our project folder
download.file(url = data_url, destfile = here('Monthly-AE-Time-Series-September-2023.xls'), mode = 'wb')
# Then we load that data into R with 'read_excel' and tell it what part of the workbook we want
Monthly_Data <- read_excel(path = here('Monthly-AE-Time-Series-September-2023.xls'), sheet = 1, range = "B14:N172",
col_names = TRUE,
col_types = c("date","numeric","numeric","numeric",
"numeric","numeric","numeric", "numeric",
"numeric","numeric","numeric", "numeric",
"numeric"), skip = 13) |>
clean_names()
# We define the URL first from the website
data_url <- 'https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fwww.england.nhs.uk%2Fstatistics%2Fwp-content%2Fuploads%2Fsites%2F2%2F2023%2F10%2FMonthly-AE-Time-Series-September-2023.xls&wdOrigin=BROWSELINK'
# Then we load that data into R with 'read_excel' and tell it what part of the workbook we want
Monthly_Data <- read_excel(path = here('Monthly-AE-Time-Series-September-2023.xlsx'), sheet = 1, range = "B14:N172",
col_names = TRUE,
col_types = c("date","numeric","numeric","numeric",
"numeric","numeric","numeric", "numeric",
"numeric","numeric","numeric", "numeric",
"numeric"), skip = 13) |>
clean_names()
# We define the URL first from the website
data_url <- 'https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fwww.england.nhs.uk%2Fstatistics%2Fwp-content%2Fuploads%2Fsites%2F2%2F2023%2F10%2FMonthly-AE-Time-Series-September-2023.xls&wdOrigin=BROWSELINK'
# Then we load that data into R with 'read_excel' and tell it what part of the workbook we want
Monthly_Data <- read_excel(path = here('Monthly-AE-Time-Series-September-2023.xlsx'), sheet = 1, range = "B14:N172",
col_names = TRUE,
col_types = c("date","numeric","numeric","numeric",
"numeric","numeric","numeric", "numeric",
"numeric","numeric","numeric", "numeric",
"numeric"), skip = 13) |>
clean_names()
Monthly_Data_Formatted <- Monthly_Data |>
# Formatting variables to integers and renaming to make them more manageable
mutate(
`Total Attendances` = as.integer(total_attendances),
`Total Emergency Admissions` = as.integer(total_emergency_admissions),
`4 Hour Breaches` = as.integer(number_of_patients_spending_4_hours_from_decision_to_admit_to_admission),
`12 Hour Breaches` = as.integer(number_of_patients_spending_12_hours_from_decision_to_admit_to_admission),
`Period Formatted` = as.Date(period),
# We're creating a 'Year' variable based off of the 'Period Formatted' variable we made above
`Year` = year(`Period Formatted`)) |>
# Keeping the formatted columns
select(`Period Formatted`,
`Year`,
`Total Attendances`,
`Total Emergency Admissions`,
`4 Hour Breaches`,
`12 Hour Breaches`) |>
view()
Yearly_Table <- Monthly_Data_Formatted |>
group_by(`Year`) |>
summarise(
`Total Emergency Admissions` = sum(`Total Emergency Admissions`),
`4 Hour Breaches` = sum(`4 Hour Breaches`),
`12 Hour Breaches` = sum(`12 Hour Breaches`)
) |>
gt() |>
tab_header(title = md("**Total A&E Breaches in England 2010-2023**"),
subtitle = md("Both 4-Hour and 12-Hour Breaches")) |>
tab_source_note(source_note = "Source: NHS England A&E Monthly Statistics") |>
# This part formas the selected columns by choosing the delimiter and number of decimals
fmt_number(columns = c(`Total Emergency Admissions`,`4 Hour Breaches`, `12 Hour Breaches`),
sep_mark = ",",
decimals = 0)
Yearly_Table
Simple_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `Total Emergency Admissions`)) +
geom_line() +
labs(title = "Total A&E Admissions in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of Breaches")
Simple_Plot
Simple_Plot_Dates <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `Total Emergency Admissions`)) +
geom_line() +
labs(title = "Total A&E Admissions in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Total A&E Admissions") +
# We can simply add our scale onto the graph by including the 'scale_x_date' condition
scale_x_date(date_labels = "%Y", date_breaks = "1 year")
Simple_Plot_Dates
Simple_Breaches_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `4 Hour Breaches`)) +
# This first geom_line represents the 4 Hour line we detailed in the ggplot condition
geom_line(colour = "red", size = 0.5) +
# Then to add a second line we simpply add another geom_line condition and specify the variables
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`), colour = "purple", size = 0.5) +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")
Simple_Breaches_Plot
Annotated_Breaches_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `4 Hour Breaches`)) +
geom_line(colour = "red", size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`), colour = "purple", size = 0.5) +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
# The 'annotate' condition is used to place a rectangle on the graph, the x asis defines the width and the y defines the height
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
# Here we add some text to the graph to indicate what the rectangle is showing us
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period")
Annotated_Breaches_Plot
Arrow_Breaches_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `4 Hour Breaches`)) +
geom_line(colour = "red", size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`), colour = "purple", size = 0.5) +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of A&E Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period") +
# We use 'annotate' again and using the same syntax as the box we now define the arrow's curve and length
annotate('curve', x = as.Date("2018-10-01"), xend = as.Date("2019-12-01"),
y = 125000, yend = 110000, linewidth = 0.5, curvature = 0.5,
arrow = arrow(length = unit(0.4,'cm')))
Arrow_Breaches_Plot
Line_Breaches_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `4 Hour Breaches`)) +
geom_line(colour = "red", size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`), colour = "purple", size = 0.5) +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of A&E Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period") +
# We use 'annotate' again and using the same syntax as the box we now define the arrow's curve and length
annotate('curve', x = as.Date("2018-10-01"), xend = as.Date("2019-12-01"),
y = 125000, yend = 110000, linewidth = 0.5, curvature = 0.5,
arrow = arrow(length = unit(0.4,'cm'))) +
# Below is the code for adding the vertical lines, again using the axes to determine their positions
geom_segment(aes(x = as.Date("2020-03-01"), y = 0, yend = 150000,
xend = as.Date("2020-03-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2020-11-01"), y = 0, yend = 150000,
xend = as.Date("2020-11-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2021-01-01"), y = 0, yend = 150000,
xend = as.Date("2021-01-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
# Here we add labels to distinguish the lines
annotate('text',x = as.Date("2018-05-01"),y = 160000,label = "First lockdown") +
annotate('text',x = as.Date("2020-03-01"),y = 180000,label = "Second lockdown") +
annotate('text',x = as.Date("2021-09-01"),y = 165000,label = "Third lockdown") +
# And now add the arrows to make it clear which is which
annotate('curve',x = as.Date("2019-01-01"),xend = as.Date("2020-03-01"), y = 155000, yend = 140000 ,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2020-02-01"),xend = as.Date("2020-11-01"), y = 175000, yend = 150000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2021-10-01"),xend = as.Date("2021-01-01"), y = 155000 , yend = 140000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm')))
Line_Breaches_Plot
# Creating our colours object
COLOURS <- c("4 Hour" = "red", "12 Hour" = "purple")
Themed_Breaches_Plot <- ggplot(Monthly_Data_Formatted) +
# We replace the colours in the aes() argument with their new names above
geom_line(aes(x = `Period Formatted`, y = `4 Hour Breaches`, colour = "4 Hour"), size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`, colour = "12 Hour"), size = 0.5) +
# Add the scale_colour_manual argument here
scale_color_manual(values = COLOURS, name = "Type of Breach") +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of A&E Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period") +
# We use 'annotate' again and using the same syntax as the box we now define the arrow's curve and length
annotate('curve', x = as.Date("2018-10-01"), xend = as.Date("2019-12-01"),
y = 125000, yend = 110000, linewidth = 0.5, curvature = 0.5,
arrow = arrow(length = unit(0.4,'cm'))) +
# Below is the code for adding the vertical lines, again using the axes to determine their positions
geom_segment(aes(x = as.Date("2020-03-01"), y = 0, yend = 150000,
xend = as.Date("2020-03-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2020-11-01"), y = 0, yend = 150000,
xend = as.Date("2020-11-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2021-01-01"), y = 0, yend = 150000,
xend = as.Date("2021-01-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
# Here we add labels to distinguish the lines
annotate('text',x = as.Date("2018-05-01"),y = 160000,label = "First lockdown") +
annotate('text',x = as.Date("2020-03-01"),y = 180000,label = "Second lockdown") +
annotate('text',x = as.Date("2021-09-01"),y = 165000,label = "Third lockdown") +
# And now add the arrows to make it clear which is which
annotate('curve',x = as.Date("2019-01-01"),xend = as.Date("2020-03-01"), y = 155000, yend = 140000 ,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2020-02-01"),xend = as.Date("2020-11-01"), y = 175000, yend = 150000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2021-10-01"),xend = as.Date("2021-01-01"), y = 155000 , yend = 140000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
# We can start by adding a type of theme here, in this case 'light'
theme_light()
Themed_Breaches_Plot
# Creating our colours object
COLOURS <- c("4 Hour" = "red", "12 Hour" = "purple")
Legend_Breaches_Plot <- ggplot(Monthly_Data_Formatted) +
# We replace the colours in the aes() argument with their new names above
geom_line(aes(x = `Period Formatted`, y = `4 Hour Breaches`, colour = "4 Hour"), size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`, colour = "12 Hour"), size = 0.5) +
# Add the scale_colour_manual argument here
scale_color_manual(values = COLOURS, name = "Type of Breach") +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of A&E Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period") +
# We use 'annotate' again and using the same syntax as the box we now define the arrow's curve and length
annotate('curve', x = as.Date("2018-10-01"), xend = as.Date("2019-12-01"),
y = 125000, yend = 110000, linewidth = 0.5, curvature = 0.5,
arrow = arrow(length = unit(0.4,'cm'))) +
# Below is the code for adding the vertical lines, again using the axes to determine their positions
geom_segment(aes(x = as.Date("2020-03-01"), y = 0, yend = 150000,
xend = as.Date("2020-03-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2020-11-01"), y = 0, yend = 150000,
xend = as.Date("2020-11-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2021-01-01"), y = 0, yend = 150000,
xend = as.Date("2021-01-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
# Here we add labels to distinguish the lines
annotate('text',x = as.Date("2018-05-01"),y = 160000,label = "First lockdown") +
annotate('text',x = as.Date("2020-03-01"),y = 180000,label = "Second lockdown") +
annotate('text',x = as.Date("2021-09-01"),y = 165000,label = "Third lockdown") +
# And now add the arrows to make it clear which is which
annotate('curve',x = as.Date("2019-01-01"),xend = as.Date("2020-03-01"), y = 155000, yend = 140000 ,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2020-02-01"),xend = as.Date("2020-11-01"), y = 175000, yend = 150000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2021-10-01"),xend = as.Date("2021-01-01"), y = 155000 , yend = 140000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
# We can start by adding a type of theme here, in this case 'light'
theme_light() +
# Now we can add the legend and title details
theme(plot.title = element_text(size = 13, face = 'bold') ,
plot.subtitle = element_text(size = 11),
axis.title = element_text(size = 12, face = 'bold'),
axis.text.x = element_text(size = 10.5, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10.5),
legend.box.background = element_rect(colour = "black", linewidth = 1),
legend.box.just = c("right", "top"),
legend.text = element_text(size = 8))
Legend_Breaches_Plot
# We define the URL first from the website
data_url <- 'https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fwww.england.nhs.uk%2Fstatistics%2Fwp-content%2Fuploads%2Fsites%2F2%2F2023%2F10%2FMonthly-AE-Time-Series-September-2023.xls&wdOrigin=BROWSELINK'
# Then we load that data into R with 'read_excel' and tell it what part of the workbook we want
Monthly_Data <- read_excel(path = here('Monthly-AE-Time-Series-September-2023.xlsx'), sheet = 1, range = "B14:N172",
col_names = TRUE,
col_types = c("date","numeric","numeric","numeric",
"numeric","numeric","numeric", "numeric",
"numeric","numeric","numeric", "numeric",
"numeric"), skip = 13) |>
clean_names()
library(httr)
library(tidyverse)
library(janitor)
library(readxl)
library(here)
library(gt)
library(ggplot2)
# We define the URL first from the website
data_url <- 'https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fwww.england.nhs.uk%2Fstatistics%2Fwp-content%2Fuploads%2Fsites%2F2%2F2023%2F10%2FMonthly-AE-Time-Series-September-2023.xls&wdOrigin=BROWSELINK'
# Then we load that data into R with 'read_excel' and tell it what part of the workbook we want
Monthly_Data <- read_excel(path = here('Monthly-AE-Time-Series-September-2023.xlsx'), sheet = 1, range = "B14:N172",
col_names = TRUE,
col_types = c("date","numeric","numeric","numeric",
"numeric","numeric","numeric", "numeric",
"numeric","numeric","numeric", "numeric",
"numeric"), skip = 13) |>
clean_names()
Monthly_Data_Formatted <- Monthly_Data |>
# Formatting variables to integers and renaming to make them more manageable
mutate(
`Total Attendances` = as.integer(total_attendances),
`Total Emergency Admissions` = as.integer(total_emergency_admissions),
`4 Hour Breaches` = as.integer(number_of_patients_spending_4_hours_from_decision_to_admit_to_admission),
`12 Hour Breaches` = as.integer(number_of_patients_spending_12_hours_from_decision_to_admit_to_admission),
`Period Formatted` = as.Date(period),
# We're creating a 'Year' variable based off of the 'Period Formatted' variable we made above
`Year` = year(`Period Formatted`)) |>
# Keeping the formatted columns
select(`Period Formatted`,
`Year`,
`Total Attendances`,
`Total Emergency Admissions`,
`4 Hour Breaches`,
`12 Hour Breaches`) |>
view()
Yearly_Table <- Monthly_Data_Formatted |>
group_by(`Year`) |>
summarise(
`Total Emergency Admissions` = sum(`Total Emergency Admissions`),
`4 Hour Breaches` = sum(`4 Hour Breaches`),
`12 Hour Breaches` = sum(`12 Hour Breaches`)
) |>
gt() |>
tab_header(title = md("**Total A&E Breaches in England 2010-2023**"),
subtitle = md("Both 4-Hour and 12-Hour Breaches")) |>
tab_source_note(source_note = "Source: NHS England A&E Monthly Statistics") |>
# This part formas the selected columns by choosing the delimiter and number of decimals
fmt_number(columns = c(`Total Emergency Admissions`,`4 Hour Breaches`, `12 Hour Breaches`),
sep_mark = ",",
decimals = 0)
Yearly_Table
Simple_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `Total Emergency Admissions`)) +
geom_line() +
labs(title = "Total A&E Admissions in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of Breaches")
Simple_Plot
Simple_Plot_Dates <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `Total Emergency Admissions`)) +
geom_line() +
labs(title = "Total A&E Admissions in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Total A&E Admissions") +
# We can simply add our scale onto the graph by including the 'scale_x_date' condition
scale_x_date(date_labels = "%Y", date_breaks = "1 year")
Simple_Plot_Dates
Simple_Breaches_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `4 Hour Breaches`)) +
# This first geom_line represents the 4 Hour line we detailed in the ggplot condition
geom_line(colour = "red", size = 0.5) +
# Then to add a second line we simpply add another geom_line condition and specify the variables
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`), colour = "purple", size = 0.5) +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")
Simple_Breaches_Plot
Annotated_Breaches_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `4 Hour Breaches`)) +
geom_line(colour = "red", size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`), colour = "purple", size = 0.5) +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
# The 'annotate' condition is used to place a rectangle on the graph, the x asis defines the width and the y defines the height
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
# Here we add some text to the graph to indicate what the rectangle is showing us
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period")
Annotated_Breaches_Plot
Arrow_Breaches_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `4 Hour Breaches`)) +
geom_line(colour = "red", size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`), colour = "purple", size = 0.5) +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of A&E Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period") +
# We use 'annotate' again and using the same syntax as the box we now define the arrow's curve and length
annotate('curve', x = as.Date("2018-10-01"), xend = as.Date("2019-12-01"),
y = 125000, yend = 110000, linewidth = 0.5, curvature = 0.5,
arrow = arrow(length = unit(0.4,'cm')))
Arrow_Breaches_Plot
Line_Breaches_Plot <- ggplot(Monthly_Data_Formatted, aes(x = `Period Formatted`, y = `4 Hour Breaches`)) +
geom_line(colour = "red", size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`), colour = "purple", size = 0.5) +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of A&E Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period") +
# We use 'annotate' again and using the same syntax as the box we now define the arrow's curve and length
annotate('curve', x = as.Date("2018-10-01"), xend = as.Date("2019-12-01"),
y = 125000, yend = 110000, linewidth = 0.5, curvature = 0.5,
arrow = arrow(length = unit(0.4,'cm'))) +
# Below is the code for adding the vertical lines, again using the axes to determine their positions
geom_segment(aes(x = as.Date("2020-03-01"), y = 0, yend = 150000,
xend = as.Date("2020-03-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2020-11-01"), y = 0, yend = 150000,
xend = as.Date("2020-11-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2021-01-01"), y = 0, yend = 150000,
xend = as.Date("2021-01-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
# Here we add labels to distinguish the lines
annotate('text',x = as.Date("2018-05-01"),y = 160000,label = "First lockdown") +
annotate('text',x = as.Date("2020-03-01"),y = 180000,label = "Second lockdown") +
annotate('text',x = as.Date("2021-09-01"),y = 165000,label = "Third lockdown") +
# And now add the arrows to make it clear which is which
annotate('curve',x = as.Date("2019-01-01"),xend = as.Date("2020-03-01"), y = 155000, yend = 140000 ,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2020-02-01"),xend = as.Date("2020-11-01"), y = 175000, yend = 150000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2021-10-01"),xend = as.Date("2021-01-01"), y = 155000 , yend = 140000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm')))
Line_Breaches_Plot
# Creating our colours object
COLOURS <- c("4 Hour" = "red", "12 Hour" = "purple")
Themed_Breaches_Plot <- ggplot(Monthly_Data_Formatted) +
# We replace the colours in the aes() argument with their new names above
geom_line(aes(x = `Period Formatted`, y = `4 Hour Breaches`, colour = "4 Hour"), size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`, colour = "12 Hour"), size = 0.5) +
# Add the scale_colour_manual argument here
scale_color_manual(values = COLOURS, name = "Type of Breach") +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of A&E Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period") +
# We use 'annotate' again and using the same syntax as the box we now define the arrow's curve and length
annotate('curve', x = as.Date("2018-10-01"), xend = as.Date("2019-12-01"),
y = 125000, yend = 110000, linewidth = 0.5, curvature = 0.5,
arrow = arrow(length = unit(0.4,'cm'))) +
# Below is the code for adding the vertical lines, again using the axes to determine their positions
geom_segment(aes(x = as.Date("2020-03-01"), y = 0, yend = 150000,
xend = as.Date("2020-03-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2020-11-01"), y = 0, yend = 150000,
xend = as.Date("2020-11-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2021-01-01"), y = 0, yend = 150000,
xend = as.Date("2021-01-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
# Here we add labels to distinguish the lines
annotate('text',x = as.Date("2018-05-01"),y = 160000,label = "First lockdown") +
annotate('text',x = as.Date("2020-03-01"),y = 180000,label = "Second lockdown") +
annotate('text',x = as.Date("2021-09-01"),y = 165000,label = "Third lockdown") +
# And now add the arrows to make it clear which is which
annotate('curve',x = as.Date("2019-01-01"),xend = as.Date("2020-03-01"), y = 155000, yend = 140000 ,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2020-02-01"),xend = as.Date("2020-11-01"), y = 175000, yend = 150000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2021-10-01"),xend = as.Date("2021-01-01"), y = 155000 , yend = 140000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
# We can start by adding a type of theme here, in this case 'light'
theme_light()
Themed_Breaches_Plot
# Creating our colours object
COLOURS <- c("4 Hour" = "red", "12 Hour" = "purple")
Legend_Breaches_Plot <- ggplot(Monthly_Data_Formatted) +
# We replace the colours in the aes() argument with their new names above
geom_line(aes(x = `Period Formatted`, y = `4 Hour Breaches`, colour = "4 Hour"), size = 0.5) +
geom_line(aes(x = `Period Formatted`, y = `12 Hour Breaches`, colour = "12 Hour"), size = 0.5) +
# Add the scale_colour_manual argument here
scale_color_manual(values = COLOURS, name = "Type of Breach") +
labs(title = "Total A&E Breaches in England",
subtitle = "For 2010-2023",
x = "Date",
y = "Number of A&E Breaches") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year")+
annotate('rect', xmin = as.Date("2020-01-01"), xmax = as.Date("2021-12-31"), ymin = 0, ymax = 130000,
alpha = 0.1, fill = "blue", col = "black") +
annotate('text', x = as.Date("2018-08-01"), y = 130000, label = "COVID Period") +
# We use 'annotate' again and using the same syntax as the box we now define the arrow's curve and length
annotate('curve', x = as.Date("2018-10-01"), xend = as.Date("2019-12-01"),
y = 125000, yend = 110000, linewidth = 0.5, curvature = 0.5,
arrow = arrow(length = unit(0.4,'cm'))) +
# Below is the code for adding the vertical lines, again using the axes to determine their positions
geom_segment(aes(x = as.Date("2020-03-01"), y = 0, yend = 150000,
xend = as.Date("2020-03-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2020-11-01"), y = 0, yend = 150000,
xend = as.Date("2020-11-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
geom_segment(aes(x = as.Date("2021-01-01"), y = 0, yend = 150000,
xend = as.Date("2021-01-01"), colour = "segment"),
linewidth = 0.5, colour="green") +
# Here we add labels to distinguish the lines
annotate('text',x = as.Date("2018-05-01"),y = 160000,label = "First lockdown") +
annotate('text',x = as.Date("2020-03-01"),y = 180000,label = "Second lockdown") +
annotate('text',x = as.Date("2021-09-01"),y = 165000,label = "Third lockdown") +
# And now add the arrows to make it clear which is which
annotate('curve',x = as.Date("2019-01-01"),xend = as.Date("2020-03-01"), y = 155000, yend = 140000 ,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2020-02-01"),xend = as.Date("2020-11-01"), y = 175000, yend = 150000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
annotate('curve',x = as.Date("2021-10-01"),xend = as.Date("2021-01-01"), y = 155000 , yend = 140000,
linewidth = 0.5,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +
# We can start by adding a type of theme here, in this case 'light'
theme_light() +
# Now we can add the legend and title details
theme(plot.title = element_text(size = 13, face = 'bold') ,
plot.subtitle = element_text(size = 11),
axis.title = element_text(size = 12, face = 'bold'),
axis.text.x = element_text(size = 10.5, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10.5),
legend.box.background = element_rect(colour = "black", linewidth = 1),
legend.box.just = c("right", "top"),
legend.text = element_text(size = 8))
Legend_Breaches_Plot
